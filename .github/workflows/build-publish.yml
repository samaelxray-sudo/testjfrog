
name: Build and Tag Docker Image

on:
  push:
    branches:
      - main
      
jobs:
  build-and-tag:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: ${{ vars.JF_URL }}
          JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}

      - name: Build Tag and push Docker Image
        env:
          IMAGE_NAME: samaelxray.jfrog.io/test-docker/jfrog-docker-example-image:${{ github.run_number }}
        run: |
          jf docker build -t $IMAGE_NAME .
          jf docker push $IMAGE_NAME
          
      - name: Publish Build info With JFrog CLI
        env:
          # Generated and maintained by GitHub
          JFROG_CLI_BUILD_NAME: jfrog-docker-build-example
          # JFrog organization secret
          JFROG_CLI_BUILD_NUMBER : ${{ github.run_number }}
        run: |
          # Export the build name and build nuber
          # Collect environment variables for the build
          jf rt build-collect-env
          # Collect VCS details from git and add them to the build
          jf rt build-add-git
          # Publish build info
          jf rt build-publish
          jf rt build-scan
      - name: Escanear la imagen de Docker con Xray
        env:
          IMAGE_NAME: samaelxray.jfrog.io/test-docker/jfrog-docker-example-image:${{ github.run_number }}
        id: xray_scan
        run: |
          jf docker scan $IMAGE_NAME
 
      - name: Generar reporte de vulnerabilidades
        env:
          IMAGE_NAME: samaelxray.jfrog.io/test-docker/jfrog-docker-example-image:${{ github.run_number }}
        run: |
          # Generar un reporte del resultado del escaneo.
          # La JFrog CLI no tiene un comando directo para "reporte" de vulnerabilidades de una imagen escaneada en un solo paso.
          # En su lugar, el escaneo (`docker-scan`) muestra el resultado en la salida estándar.
          # Puedes capturar esta salida y guardarla en un archivo o utilizar la API de JFrog para generar reportes más complejos.
          # Ejemplo de cómo guardar el output del escaneo a un archivo:
          echo "Generando reporte..."
          jf docker scan $IMAGE_NAME --format json > xray-report.json
          cat xray-report.json
 
      - name: Subir el reporte como artefacto
        uses: actions/upload-artifact@v4
        with:
          name: xray-report
          path: xray-report.json
