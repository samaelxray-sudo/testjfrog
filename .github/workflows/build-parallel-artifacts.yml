name: Parallel Artifacts

on:
  push:
    branches:
      - main
    paths:
      - .github/workflows/build-parallel-artifacts.yml
jobs:
  discover-services:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.set-services.outputs.services }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Discover services dynamically
        id: set-services
        run: |
          # ðŸ”½ AquÃ­ calculas tu lista dinÃ¡micamente
          SERVICES="image-1 image-2 image-3"

          # Convertimos la lista a JSON: ["image-1","image-2","image-3"]
          SERVICES_JSON=$(printf '["%s"]' "$(echo $SERVICES | sed 's/ /","/g')")

          echo "services=$SERVICES_JSON" >> $GITHUB_OUTPUT
          echo "Discovered services: $SERVICES_JSON"

  build-docker:
    runs-on: ubuntu-latest
    needs: discover-services
    strategy:
      matrix:
        image: ${{ fromJson(needs.discover-services.outputs.services) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: ${{ vars.JF_URL }}
          JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}

      - name: Build & Push Docker image
        env:
          IMAGE_NAME: samaelxray.jfrog.io/test-docker-local/${{ matrix.image }}:${{ github.run_number }}
        run: |
          echo "Docker build"
          jf docker login samaelxray.jfrog.io -u samaelxray@gmail.com -p ${{ secrets.JF_ACCESS_TOKEN }}
          jf docker build -t $IMAGE_NAME ./microservices/${{ matrix.image }}
          
          echo "Push de la imagen a Artifactory, vinculada al build-info"
          jfrog rt docker-push $IMAGE_NAME test-docker-local \
            --build-name=my-build --build-number=${{ github.run_number }}

      - name: Publish partial build-info
        run: |
          jfrog rt build-publish my-build-${{ matrix.image }} ${{ github.run_number }}

  merge-builds:
    runs-on: ubuntu-latest
    needs: [discover-services, build-docker]
    steps:
          
      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: ${{ vars.JF_URL }}
          JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}

      - name: Append partial builds into parent
        run: |
          for svc in $(echo '${{ needs.discover-services.outputs.services }}' | jq -r '.[]'); do
            jfrog rt build-append my-build ${{ github.run_number }} my-build-$svc ${{ github.run_number }}
          done

      - name: Publish parent build
        run: |
          jfrog rt build-publish my-build ${{ github.run_number }}
      - name: (Optional) Delete temporary builds
        run: |
          for svc in $(echo '${{ needs.discover-services.outputs.services }}' | jq -r '.[]'); do
            echo "Deleting temporary build: my-build-$svc / ${{ github.run_number }}"
            jfrog rt build-discard my-build-$svc \
              --max-days=0 \
              --async=false
          done
