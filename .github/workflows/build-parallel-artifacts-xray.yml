name: Build and Scan with JFrog

on:
  workflow_dispatch:
  push:
    branches:
      - main

env:
  JF_URL: ${{ secrets.JF_URL }}
  JF_USER: ${{ secrets.JF_USER }}
  JF_PASSWORD: ${{ secrets.JF_PASSWORD }}
  BUILD_NAME: new-build
  BUILD_NUMBER: ${{ github.run_number }}
  DOCKER_REPO: test-docker-local
  SERVICES: "service1 service2 service3"

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ${{ fromJson('["service1","service2","service3"]') }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4

      - name: Configure JFrog
        run: jf c add --url $JF_URL --user $JF_USER --password $JF_PASSWORD --interactive=false

      - name: Build and push Docker image
        run: |
          set -euo pipefail
          IMAGE=${{ matrix.service }}
          docker build -t $JF_URL/$DOCKER_REPO/$IMAGE:$BUILD_NUMBER $IMAGE
          docker push $JF_URL/$DOCKER_REPO/$IMAGE:$BUILD_NUMBER
          jf rt bdc $DOCKER_REPO \
            --image-file=<(echo "$JF_URL/$DOCKER_REPO/$IMAGE:$BUILD_NUMBER@$(docker inspect --format='{{index .RepoDigests 0}}' $JF_URL/$DOCKER_REPO/$IMAGE:$BUILD_NUMBER | cut -d'@' -f2)") \
            --build-name=$BUILD_NAME --build-number=$BUILD_NUMBER --module=$IMAGE

      - name: Collect environment
        run: jf rt bce $BUILD_NAME $BUILD_NUMBER

      - name: Save build-info part
        run: jf rt bp $BUILD_NAME $BUILD_NUMBER --dry-run > ${{ matrix.service }}-build-info.json

      - uses: actions/upload-artifact@v4
        with:
          name: jfrog-parts
          path: ${{ matrix.service }}-build-info.json

  publish:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: jfrog-parts

      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4

      - name: Configure JFrog
        run: jf c add --url $JF_URL --user $JF_USER --password $JF_PASSWORD --interactive=false

      - name: Merge and publish build-info
        run: |
          set -euo pipefail
          for f in *.json; do
            jf rt ba $BUILD_NAME $BUILD_NUMBER $BUILD_NAME $BUILD_NUMBER --spec=$f || true
          done
          jf rt bp $BUILD_NAME $BUILD_NUMBER --overwrite --detailed-summary

      - name: Trigger Xray scan
        run: jf xr curl -XPOST "/api/v2/ci/build" -H "Content-Type: application/json" -d "{\"build_name\":\"$BUILD_NAME\",\"build_number\":\"$BUILD_NUMBER\"}"

      - name: Create vulnerabilities report
        id: vuln_report
        run: |
          set -euo pipefail
          body=$(cat <<EOF
          {
            "name": "report-$BUILD_NAME-$BUILD_NUMBER",
            "resources": {
              "builds": {
                "names": ["$BUILD_NAME"],
                "number_of_latest_versions": 1
              }
            },
            "filters": {
              "severities": ["Critical","High","Medium","Low"]
            }
          }
          EOF
          )
          echo "Payload: $body"
          resp=$(jf xr curl -XPOST /api/v1/reports/vulnerabilities -H "Content-Type: application/json" -d "$body")
          echo "Response: $resp" | tee resp.json
          rid=$(echo "$resp" | jq -r '.report_id // empty')
          [ -z "$rid" ] && { echo "❌ Error creating vulnerabilities report"; exit 1; }
          echo "rid=$rid" >> $GITHUB_OUTPUT

      - name: Download vulnerabilities report
        run: |
          set -euo pipefail
          jf xr curl -XGET "/api/v1/reports/vulnerabilities/${{ steps.vuln_report.outputs.rid }}/download" --output vuln-report.json
          cat vuln-report.json | jq > vuln-report.pretty.json

      - name: Generate SBOM (CycloneDX)
        run: |
          set -euo pipefail
          jf xr curl -XPOST /api/v1/sbomExport -H "Content-Type: application/json" -d "{
            \"export_format\": \"cyclonedx\",
            \"resources\": {
              \"builds\": [
                { \"name\": \"$BUILD_NAME\", \"number\": \"$BUILD_NUMBER\" }
              ]
            }
          }" --output sbom.json

      - uses: actions/upload-artifact@v4
        with:
          name: reports
          path: |
            vuln-report.json
            vuln-report.pretty.json
            sbom.json
