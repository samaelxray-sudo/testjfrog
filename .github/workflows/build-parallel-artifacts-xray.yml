name: Parallel Docker Build + Xray Reports

on:
  push:
    branches: [main]
    paths:
      - .github/workflows/build-parallel-artifacts-xray.yml

env:
  BUILD_NAME: new-build
  BUILD_NUMBER: ${{ github.run_number }}

jobs:
  discover-services:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.set-services.outputs.services }}
    steps:
      - uses: actions/checkout@v4

      - id: set-services
        run: |
          SERVICES="image-1 image-2 image-3"
          SERVICES_JSON=$(printf '["%s"]' "$(echo $SERVICES | sed 's/ /","/g')")
          echo "services=$SERVICES_JSON" >> $GITHUB_OUTPUT
          echo "Discovered services: $SERVICES_JSON"

  build:
    name: Build ${{ matrix.image }}
    runs-on: ubuntu-latest
    needs: discover-services
    strategy:
      matrix:
        image: ${{ fromJson(needs.discover-services.outputs.services) }}
    env:
      IMAGE_NAME: samaelxray.jfrog.io/test-docker-local/${{ matrix.image }}:${{ github.run_number }}
    steps:
      - uses: actions/checkout@v4

      - uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: ${{ vars.JF_URL }}
          JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}

      - name: Build & Push Docker image
        run: |
          set -euo pipefail
          jf docker login samaelxray.jfrog.io -u samaelxray@gmail.com -p ${{ secrets.JF_ACCESS_TOKEN }}
          jf docker build -t "$IMAGE_NAME" ./microservices/${{ matrix.image }}
          jf docker push "$IMAGE_NAME"

      - name: Create digest file
        run: |
          set -euo pipefail
          DIGEST=$(docker buildx imagetools inspect "$IMAGE_NAME" | awk '/Digest:/ {print $2; exit}')
          [ -z "$DIGEST" ] && { echo "❌ No digest for $IMAGE_NAME"; exit 1; }
          echo "$IMAGE_NAME@$DIGEST" | tee image.txt

      - name: Add Docker image to build-info
        run: |
          jf rt bdc \
            --image-file=image.txt \
            --build-name=$BUILD_NAME \
            --build-number=$BUILD_NUMBER \
            --module=${{ matrix.image }} \
            test-docker-local

          mkdir -p jfrog-parts
          jf rt bp $BUILD_NAME $BUILD_NUMBER --dry-run > "jfrog-parts/${{ matrix.image }}.json"

      - uses: actions/upload-artifact@v4
        with:
          name: jfrog-part-${{ matrix.image }}
          path: jfrog-parts/${{ matrix.image }}.json
          retention-days: 1

  merge:
    name: Merge & Publish build-info
    runs-on: ubuntu-latest
    needs: [discover-services, build]
    env:
      REPORT_DIR: reports
    steps:
      - uses: actions/checkout@v4

      - uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: ${{ vars.JF_URL }}
          JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}

      - uses: actions/download-artifact@v4
        with:
          pattern: jfrog-part-*
          merge-multiple: true

      - name: Merge partial build-infos
        run: |
          jq -s '{
            name: (.[0].name),
            number: (.[0].number),
            started: (.[0].started),
            url: (.[0].url),
            agent: (.[0].agent),
            buildAgent: (.[0].buildAgent),
            properties: (reduce .[].properties as $p ({}; . * ($p // {}))),
            modules: (map(.modules) | add)
          }' *.json > merged.json

      - name: Publish build-info
        run: jf rt curl -X PUT "/api/build" -H "Content-Type: application/json" -T merged.json

      - name: Run Xray scan + SBOM
        run: |
          mkdir -p $REPORT_DIR
          jf bs "$BUILD_NAME" "$BUILD_NUMBER" --vuln --format=json --fail=false > $REPORT_DIR/security.json
          jf bs "$BUILD_NAME" "$BUILD_NUMBER" --format=cyclonedx --fail=false > $REPORT_DIR/sbom.cdx.json

      - uses: actions/upload-artifact@v4
        with:
          name: "${{ env.BUILD_NAME }}-${{ env.BUILD_NUMBER }}-xray-sbom"
          path: ${{ env.REPORT_DIR }}/*
          retention-days: 14

      - name: Job Summary
        run: |
          {
            echo "### Xray for $BUILD_NAME/$BUILD_NUMBER"
            echo "- Security report: \`reports/security.json\`"
            echo "- SBOM (CycloneDX): \`reports/sbom.cdx.json\`"
          } >> $GITHUB_STEP_SUMMARY

  security-report:
    name: Generate Advanced Security Report
    runs-on: ubuntu-latest
    needs: merge
    steps:
      - uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: ${{ vars.JF_URL }}
          JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}

      - run: mkdir -p reports

      - name: Trigger Xray scan
        run: |
          jf xr curl -XPOST /api/v2/ci/build \
            -H "Content-Type: application/json" \
            -d "{\"build_name\":\"$BUILD_NAME\",\"build_number\":\"$BUILD_NUMBER\"}"

      - name: Create vulnerabilities report
        id: vuln_report
        run: |
          body=$(jq -n \
            --arg name "report-$BUILD_NAME-$BUILD_NUMBER" \
            --arg bn "$BUILD_NAME" \
            --argjson latest 1 \
            '{name:$name,resources:{builds:{names:[$bn],number_of_latest_versions:$latest}},filters:{severities:["Critical","High","Medium","Low"]}}')
          
          resp=$(jf xr curl -XPOST /api/v1/reports/vulnerabilities -H "Content-Type: application/json" -d "$body")
          echo "Response: $resp" | tee resp.json

          rid=$(echo "$resp" | jq -r '.report_id // empty')
          [ -z "$rid" ] && { echo "❌ No report_id"; exit 1; }

          echo "rid=$rid" >> $GITHUB_OUTPUT

      - name: Wait until report is ready
        run: |
          rid="${{ steps.vuln_report.outputs.rid }}"
          for i in {1..60}; do
            status=$(jf xr curl -XGET "/api/v1/reports/$rid" | jq -r .status)
            echo "Status: $status"
            case "$status" in
              completed) break ;;
              failed) echo "❌ Report failed"; exit 1 ;;
            esac
            sleep 5
          done

      - name: Export vulnerabilities report
        run: |
          rid="${{ steps.vuln_report.outputs.rid }}"
          jf xr curl -XGET "/api/v1/reports/export/$rid?format=pdf&file_name=$BUILD_NAME-$BUILD_NUMBER-vuln" \
            > "reports/$BUILD_NAME-$BUILD_NUMBER-vuln-report.zip"

      - name: Export Build details (PDF + SBOMs)
        run: |
          jf xr curl -XPOST /api/v2/component/exportDetails \
            -H "Content-Type: application/json" \
            -d "{
              \"package_type\": \"build\",
              \"component_name\": \"$BUILD_NAME:$BUILD_NUMBER\",
              \"path\": \"artifactory-build-info/$BUILD_NAME\",
              \"vulnerabilities\": true,
              \"license\": true,
              \"operational_risk\": true,
              \"output_format\": \"pdf\",
              \"cyclonedx\": true,
              \"cyclonedx_format\": \"json\",
              \"spdx\": true,
              \"spdx_format\": \"json\"
            }" > "reports/$BUILD_NAME-$BUILD_NUMBER-export-details.zip"

      - uses: actions/upload-artifact@v4
        with:
          name: xray-advanced-${{ env.BUILD_NAME }}-${{ env.BUILD_NUMBER }}
          path: reports/*
